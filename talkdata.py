from openai import OpenAI
import re
import pandas as pd
import altair as alt
import streamlit as st
from prompts import get_system_prompt  # prompts.py iÃ§inde bu fonksiyon TANIMLI olmalÄ±

# =========================
# Basit Login (demo amaÃ§lÄ±)
# =========================
VALID_USERNAME = "admin"
VALID_PASSWORD = "1234"

def login_screen():
    st.title("GiriÅŸ EkranÄ±")
    username = st.text_input("KullanÄ±cÄ± AdÄ±")
    password = st.text_input("Åžifre", type="password")
    login_button = st.button("GiriÅŸ Yap")

    if login_button:
        if username == VALID_USERNAME and password == VALID_PASSWORD:
            st.session_state.authenticated = True
            st.success("GiriÅŸ baÅŸarÄ±lÄ±!")
            st.experimental_rerun()
        else:
            st.error("KullanÄ±cÄ± adÄ± veya ÅŸifre hatalÄ±.")

# Oturum doÄŸrulama
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    login_screen()
    st.stop()  # GiriÅŸ yapÄ±lmadÄ±ysa uygulamayÄ± durdur

# =========================
# BaÅŸlÄ±k
# =========================
st.title("Getir - Talk To Your Competition Data")

# =========================
# OpenAI Client
# =========================
# Ã–nce st.secrets, yoksa OpenAI default env deÄŸiÅŸkenini kullanÄ±r
client = OpenAI(api_key=st.secrets.get("OPENAI_API_KEY", None))

# =========================
# YardÄ±mcÄ±: SayÄ± & Tarih dÃ¶nÃ¼ÅŸtÃ¼rme + Grafik UI
# =========================
def _coerce_numeric_cols(df: pd.DataFrame) -> pd.DataFrame:
    """TÃ¼rkÃ§e sayÄ± formatlarÄ±nÄ± (binlik nokta, ondalÄ±k virgÃ¼l) numeric'e Ã§evirir."""
    for c in df.columns:
        s = df[c]
        if pd.api.types.is_numeric_dtype(s):
            continue
        try:
            # string'e Ã§evirip . (binlik) sil, , (ondalÄ±k) -> .
            s2 = s.astype(str).str.replace(".", "", regex=False).str.replace(",", ".", regex=False)
            df[c] = pd.to_numeric(s2, errors="ignore")
        except Exception:
            pass
    return df

def _add_parsed_date(df: pd.DataFrame) -> pd.DataFrame:
    """TARIH kolonunu DD.MM.YYYY formatÄ±ndan datetime'a Ã§evirip yardÄ±mcÄ± kolon ekler."""
    if "TARIH" in df.columns:
        dt = pd.to_datetime(df["TARIH"], format="%d.%m.%Y", errors="coerce")
        df["_TARIH_DT"] = dt
    return df

def render_line_chart(df: pd.DataFrame):
    """SonuÃ§ DataFrame'i iÃ§in otomatik bir line chart Ã§izer (aylar doÄŸru sÄ±rada, sayÄ±lar doÄŸru parse)."""
    if df is None or df.empty:
        return

    df = df.copy()

    # --- SayÄ± parse: '72,286,612.7266' -> en-US; '2.603,43' -> eu
    def smart_to_numeric(s: pd.Series) -> pd.Series:
        if pd.api.types.is_numeric_dtype(s):
            return s
        s = s.astype(str).str.strip()

        # iki iÅŸaret birden varsa (virgÃ¼l + nokta)
        mask_both = s.str.contains(",", na=False) & s.str.contains(r"\.", regex=True, na=False)
        # en-US: 12,345,678.90 -> virgÃ¼lleri sil, nokta kalsÄ±n
        s.loc[mask_both] = s.loc[mask_both].str.replace(",", "", regex=False)

        # sadece virgÃ¼l varsa -> 12.345,67 veya 123,45 (ondalÄ±k virgÃ¼l)
        mask_only_comma = s.str.contains(",", na=False) & ~s.str.contains(r"\.", regex=True, na=False)
        s.loc[mask_only_comma] = (
            s.loc[mask_only_comma]
            .str.replace(".", "", regex=False)  # varsa binlik nokta
            .str.replace(",", ".", regex=False)  # ondalÄ±k virgÃ¼l -> nokta
        )

        # sadece nokta varsa: zaten en-US ondalÄ±k, dokunma
        # diÄŸer durumlar numeric deÄŸilse NaN kalÄ±r
        return pd.to_numeric(s, errors="ignore")

    for c in df.columns:
        try:
            df[c] = smart_to_numeric(df[c])
        except Exception:
            pass

    # --- Tarih parse (varsa)
    if "TARIH" in df.columns:
        df["TARIH_DT"] = pd.to_datetime(df["TARIH"], format="%d.%m.%Y", errors="coerce")

    # --- Ay sÄ±ralamasÄ±
    month_order_tr = [
        "OCAK", "ÅžUBAT", "MART", "NÄ°SAN", "MAYIS", "HAZÄ°RAN",
        "TEMMUZ", "AÄžUSTOS", "EYLÃœL", "EKÄ°M", "KASIM", "ARALIK"
    ]
    # aksansÄ±z varyant da olabiliyor (OZEL -> OZEL)
    month_order_no_diac = [
        "OCAK", "SUBAT", "MART", "NISAN", "MAYIS", "HAZIRAN",
        "TEMMUZ", "AGUSTOS", "EYLUL", "EKIM", "KASIM", "ARALIK"
    ]

    # X ekseni seÃ§imi: AYISMI varsa onu kullan; yoksa TARIH_DT; yoksa ilk object kolon
    if "AYISMI" in df.columns:
        df["AYISMI"] = df["AYISMI"].astype(str).str.strip().str.upper()
        # iki farklÄ± kategori listesi dene
        if set(df["AYISMI"].unique()).issubset(set(month_order_tr)):
            cat = pd.Categorical(df["AYISMI"], categories=month_order_tr, ordered=True)
            df["AYISMI"] = cat
            df = df.sort_values("AYISMI")
            x_col = "AYISMI"
            x_is_time = False
            x_sort = month_order_tr  # Altair iÃ§in aÃ§Ä±k sort
        else:
            cat = pd.Categorical(df["AYISMI"], categories=month_order_no_diac, ordered=True)
            df["AYISMI"] = cat
            df = df.sort_values("AYISMI")
            x_col = "AYISMI"
            x_is_time = False
            x_sort = month_order_no_diac
    elif "TARIH_DT" in df.columns:
        x_col = "TARIH_DT"
        x_is_time = True
        x_sort = None
        df = df.sort_values(x_col)
    else:
        # fallback: ilk object kolon
        obj_cols = [c for c in df.columns if df[c].dtype == "object"]
        if not obj_cols:
            st.info("Grafik Ã§izebilmek iÃ§in uygun X ekseni bulunamadÄ±.")
            return
        x_col = obj_cols[0]
        x_is_time = False
        x_sort = None

    # Y ekseni: tÃ¼m sayÄ±sal sÃ¼tunlar (mantÄ±klÄ± olanlarÄ± bÄ±rakmak istersen burada filtreleyebilirsin)
    y_cols = [c for c in df.columns if pd.api.types.is_numeric_dtype(df[c])]
    if not y_cols:
        st.info("Grafik Ã§izebilmek iÃ§in sayÄ±sal kolon bulunamadÄ±.")
        return

    plot_df = df[[x_col] + y_cols].dropna()
    if plot_df.empty:
        st.info("SeÃ§ilen alanlarda grafik oluÅŸturmak iÃ§in yeterli veri yok.")
        return

    melted = plot_df.melt(id_vars=[x_col], value_vars=y_cols, var_name="Seri", value_name="DeÄŸer")

    x_enc = alt.X(
        f"{x_col}:{'T' if x_is_time else 'N'}",
        title=x_col,
        sort=x_sort if x_sort else None  # ðŸ”‘ Ay sÄ±rasÄ± burada dayatÄ±lÄ±yor
    )

    chart = (
        alt.Chart(melted)
        .mark_line(point=True)
        .encode(
            x=x_enc,
            y=alt.Y("DeÄŸer:Q", title=", ".join(y_cols)),
            color=alt.Color("Seri:N", legend=alt.Legend(title="Seri")),
            tooltip=[x_col, "Seri", "DeÄŸer"],
        )
        .properties(height=360)
    )

    st.subheader("ðŸ“ˆ Line Grafik")
    st.altair_chart(chart, use_container_width=True)



# =========================
# System Prompt (cache)
# =========================
if "system_prompt" not in st.session_state:
    st.session_state.system_prompt = get_system_prompt()

# =========================
# Mesaj State
# =========================
if "messages" not in st.session_state:
    # Ä°lk mesaj SYSTEM rolÃ¼nde (prompt)
    st.session_state.messages = [{"role": "system", "content": st.session_state.system_prompt}]

# =========================
# KullanÄ±cÄ± GiriÅŸi
# =========================
if prompt := st.chat_input("Sorunu yaz..."):
    st.session_state.messages.append({"role": "user", "content": prompt})

# =========================
# Mevcut Sohbeti GÃ¶ster (system hariÃ§)
# =========================
for message in st.session_state.messages:
    if message["role"] == "system":
        continue
    if message["role"] == "assistant":
        with st.chat_message("assistant", avatar='UM_Logo_Heritage_Red.png'):
            st.write(message["content"])
            if "results" in message:
                st.dataframe(message["results"])
    else:
        with st.chat_message("user"):
            st.write(message["content"])
            if "results" in message:
                st.dataframe(message["results"])

# =========================
# YanÄ±t Ãœretme (asistan sÄ±rasÄ±ysa)
# =========================
if st.session_state.messages and st.session_state.messages[-1]["role"] != "assistant":
    with st.chat_message("assistant", avatar='UM_Logo_Heritage_Red.png'):
        with st.spinner("Model yanÄ±t Ã¼retiyor..."):

            # API'ye gidecek temiz mesaj listesi (yalnÄ±z role + content)
            api_messages = []
            for m in st.session_state.messages:
                role = m.get("role")
                content = m.get("content")
                if role in ("system", "user", "assistant"):
                    if isinstance(content, str):
                        api_messages.append({"role": role, "content": content})
                    elif content is not None:
                        api_messages.append({"role": role, "content": str(content)})

            # OpenAI Ã§aÄŸrÄ±sÄ±
            result = client.chat.completions.create(
                model="gpt-4.1",
                messages=api_messages
            )

            response = result.choices[0].message.content or ""
            st.markdown(response)

            # Asistan mesajÄ±nÄ± state'e eklemek iÃ§in hazÄ±rla
            message = {"role": "assistant", "content": response, "avatar": 'UM_Logo_Heritage_Red.png'}

            # SQL kod bloÄŸunu yakala ve Snowflake'te Ã§alÄ±ÅŸtÄ±r
            sql_match = re.search(r"```sql\s*(.+?)\s*```", response, re.DOTALL | re.IGNORECASE)
            if sql_match:
                sql = sql_match.group(1).strip()
                try:
                    conn = st.connection("snowflake")
                    df = conn.query(sql)
                    message["results"] = df
                    st.dataframe(df)

                    # SonuÃ§tan grafik Ã§izdir
                    render_chart_ui(df)

                except Exception as e:
                    st.error(f"SQL Ã§alÄ±ÅŸtÄ±rma hatasÄ±: {e}")

            # MesajÄ± hafÄ±zaya ekle
            st.session_state.messages.append(message)
